diff --git a/Makefile b/Makefile
index 39a99d7..3b626b6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..70ec088 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,9 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+// start.c
+void            timerhalt(void); //offline 2 : exit()
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..85282d1 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : halt flag set by timerhalt.
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # halt if timerhalt has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +127,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..7246eea 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,7 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+  timerhalt();
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..3cb062a 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -321,7 +321,9 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
-
+  acquire(&np->lock);
+  np->traceId = p->traceId;
+  release(&np->lock);
   return pid;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..b50c2c0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int traceId;                 // offline 2 -- ID of the process we need to trace
 };
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..09ea797 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -10,8 +10,10 @@ void timerinit();
 // entry.S needs one stack per CPU.
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
+
+
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +75,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : halt flag to signal halt to timervec.
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +91,9 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+void
+timerhalt()
+{
+  // set halt flag in scratch area for hartid[0] to 1.
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..0261b70 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,7 @@
 #include "syscall.h"
 #include "defs.h"
 
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,7 +102,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,8 +128,120 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history]   sys_history,
+};
+
+// offline 2 -- An array mapping syscall numbers from syscall.h
+static char *syscall_names[]={
+    "","fork","exit","wait","pipe","read","kill","exec","fstat","chdir","dup","getpid","sbrk","sleep","uptime","open","write","mknod","unlink","link","mkdir","close","trace","history"
+  };
+
+struct syscall_stat syscall_history[24] = {
+    {"",0,0},
+    {"fork", 0, 0},
+    {"exit", 0, 0},
+    {"wait", 0, 0},
+    {"pipe", 0, 0},
+    {"read", 0, 0},
+    {"kill", 0, 0},
+    {"exec", 0, 0},
+    {"fstat", 0, 0},
+    {"chdir", 0, 0},
+    {"dup", 0, 0},
+    {"getpid", 0, 0},
+    {"sbrk", 0, 0},
+    {"sleep", 0, 0},
+    {"uptime", 0, 0},
+    {"open", 0, 0},
+    {"write", 0, 0},
+    {"mknod", 0, 0},
+    {"unlink", 0, 0},
+    {"link", 0, 0},
+    {"mkdir", 0, 0},
+    {"close", 0, 0},
+    {"trace", 0, 0},
+    {"history", 0, 0},
 };
 
+
+void print_syscall_args(int num) {
+  printf("args: (");
+  int a1 = 0, a3 = 0;
+  uint64 a2 = 0;
+  char a4[MAXPATH] = "";
+  char a5[MAXPATH] = "";
+
+  switch (num) {
+    case SYS_fork:
+    case SYS_uptime:
+    case SYS_getpid:
+      // No arguments
+      break;
+    case SYS_exit:
+    case SYS_kill:
+    case SYS_sbrk:
+    case SYS_sleep:
+    case SYS_trace:
+    case SYS_dup:
+    case SYS_close:
+      // int
+      argint(0, &a1);
+      printf("%d", a1);
+      break;
+    case SYS_wait:
+    case SYS_pipe:
+      // addr
+      argaddr(0, &a2);
+      printf("%p", a2);
+      break;
+    case SYS_read:
+    case SYS_write:
+      // int addr int
+      argint(0, &a1);
+      argaddr(1, &a2);
+      argint(2, &a3);
+      printf("%d, %p, %d", a1, a2, a3);
+      break;
+    case SYS_mknod:
+    case SYS_unlink:
+    case SYS_chdir:
+      // str
+      argstr(0, a4, MAXPATH);
+      printf("%s", a4);
+      break;
+    case SYS_exec:
+      // str addr
+      argstr(0, a4, MAXPATH);
+      argaddr(1, &a2);
+      printf("%s, %p", a4, a2);
+      break;
+    case SYS_fstat:
+      // int addr
+      argint(0, &a1);
+      argaddr(1, &a2);
+      printf("%d, %p", a1, a2);
+      break;
+    case SYS_link:
+      // str str
+      argstr(0, a4, MAXPATH);
+      argstr(1, a5, MAXPATH);
+      printf("%s, %s", a4, a5);
+      break;
+    case SYS_mkdir:
+    case SYS_open:
+      // str int
+      argstr(0, a4, MAXPATH);
+      argint(1, &a1);
+      printf("%s, %d", a4, a1);
+      break;
+    default:
+      printf("Unknown arguments");
+  }
+  printf("), ");
+}
+
+
 void
 syscall(void)
 {
@@ -138,7 +252,34 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    acquire(&p->lock);
+    if( p->traceId == num )
+    {
+      printf("pid: %d, syscall: %s, ",p->pid,syscall_names[num]);
+      print_syscall_args(num);
+    }
+    release(&p->lock);
+
+    acquire(&tickslock);
+    uint64 ticks_before = ticks;
+    release(&tickslock);
+
     p->trapframe->a0 = syscalls[num]();
+
+    if( p->traceId == num ){
+      printf("return: %d\n",p->trapframe->a0);
+    }
+    acquire(&tickslock);
+    uint64 ticks_after = ticks;
+    release(&tickslock);
+
+    uint64 time_taken = ticks_after - ticks_before;
+    struct syscall_stat* history_entry = &syscall_history[num];
+    acquire(&p->lock);
+    history_entry->count++;
+    history_entry->accum_time += time_taken;
+    release(&p->lock);
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e5cdf6d 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22 // offline 2 -- ID of system call of trace
+#define SYS_history  23 // offline 2 -- ID of system call of history
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..7c57018 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -16,6 +16,7 @@
 #include "file.h"
 #include "fcntl.h"
 
+
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -503,3 +504,21 @@ sys_pipe(void)
   }
   return 0;
 }
+extern struct syscall_stat syscall_history[24];
+
+uint64
+sys_history(void)
+{
+  struct proc *p = myproc();
+
+  int num;
+  uint64 st; // user pointer to struct stat
+  argint(0,&num);
+  argaddr(1, &st);
+  if(num < 0)
+    return -1;
+
+  if(copyout(p->pagetable, st, (char *)&syscall_history[num], sizeof(syscall_history[num])) < 0)
+    return -1;
+  return 0;
+}
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..575270f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,16 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//Offline 2
+uint64
+sys_trace(void)
+{
+  int traceId;
+  argint(0,&traceId);
+  if( traceId < 0)
+    return -1;
+
+  myproc()->traceId = traceId;
+  return 0;
+}
diff --git a/user/exit.c b/user/exit.c
new file mode 100644
index 0000000..99a7a10
--- /dev/null
+++ b/user/exit.c
@@ -0,0 +1,11 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  kill(1);
+  exit(0);
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..60a0cfb
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,40 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(argc>2){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+  struct syscall_stat syscall_stats;
+
+  if (argc==1)
+  {
+    for(int i=1; i<=23; i++)
+    {
+      if (history(i, &syscall_stats) < 0)
+      {
+        printf("Error: Failed to retrieve history\n");
+        exit(1);
+      }
+      printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, syscall_stats.syscall_name, syscall_stats.count, syscall_stats.accum_time);
+    }
+
+  }
+  else
+  {
+    int syscall_num = atoi(argv[1]);
+    if (history(syscall_num, &syscall_stats) < 0)
+    {
+      printf("Error: Failed to retrieve history\n");
+      exit(1);
+    }
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n", syscall_num, syscall_stats.syscall_name, syscall_stats.count, syscall_stats.accum_time);
+  }
+
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..3dd9b4c
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..5ff850e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,10 @@
 struct stat;
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
+
 
 // system calls
 int fork(void);
@@ -22,6 +28,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int); // offline 2 -- adding trace system call
+int history(int syscall_num, struct syscall_stat*);// offline 2 -- adding history system call
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..e2095e4 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");

diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b9aee6e 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,13 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+// Offline-4
+int             thread_create(uint64 fpnt, uint64 argpnt, uint64 stpnt);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void            thread_freepagetable(pagetable_t pagetable, uint64 sz);
+void            atomic_sleep(uint64 lv);
+void            cond_wakeup(int pid);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +180,11 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+// offline-4
+void            uvmThrfree(pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             uvRangemmirror(pagetable_t old, pagetable_t new, uint64 sz, uint64 nsz);
+int             atomic_copyout(pagetable_t pagetable, uint64 dstva);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..7373d00 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,10 +10,14 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct spinlock memlock[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid = 1;
 struct spinlock pid_lock;
+struct spinlock memid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -50,9 +54,12 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memid_lock, "memid_lock");
   initlock(&wait_lock, "wait_lock");
+  int i=0;
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&memlock[i++], "memlock");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -102,6 +109,19 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+  
+  acquire(&memid_lock);
+  memid = nextpid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -110,19 +130,23 @@ static struct proc*
 allocproc(void)
 {
   struct proc *p;
-
+  int i=0;
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      p->isThread = 0;
+      p->memlock = memlock[i]; //Offline-4
       goto found;
     } else {
       release(&p->lock);
     }
+    i++;
   }
   return 0;
 
 found:
   p->pid = allocpid();
+  p->memId = allocmemid();
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,8 +182,12 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    if(p->isThread==1)
+      thread_freepagetable(p->pagetable, p->sz);
+    else
+      proc_freepagetable(p->pagetable, p->sz);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -215,6 +243,15 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+//offline-4
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmThrfree(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -259,10 +296,12 @@ userinit(void)
 int
 growproc(int n)
 {
-  uint64 sz;
+  uint64 sz,osz;
+  struct proc *pp;
   struct proc *p = myproc();
-
+  acquire(&p->memlock);
   sz = p->sz;
+  osz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
@@ -271,6 +310,21 @@ growproc(int n)
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp!=p && pp->memId==p->memId ){
+      if(n>0){
+        printf("increase\n");
+        uvRangemmirror(p->pagetable, pp->pagetable, osz,sz);
+      }
+      else{
+        uvmunmap(p->pagetable, PGROUNDUP(sz), PGROUNDUP(osz)-PGROUNDUP(sz)/PGSIZE, 0);
+
+      }
+    }
+  }
+
+  release(&p->memlock);
   return 0;
 }
 
@@ -289,11 +343,13 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
+  acquire(&p->memlock);
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
   }
+  release(&p->memlock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -681,3 +737,181 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Offline-4
+int thread_create(uint64 fpnt, uint64 argpnt, uint64 stpnt)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  acquire(&p->memlock);
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  release(&p->memlock);
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = 0;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  np->trapframe->epc = fpnt;
+  np->trapframe->a0 = argpnt;
+  np->trapframe->sp = stpnt+PGSIZE;
+  np->trapframe->sp -= np->trapframe->sp%16;
+  np->isThread = 1;
+  np->memId = p->memId;
+  np->memlock = p->memlock;
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+int thread_join(int thread_id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p || pp->pid == thread_id){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = p->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void thread_exit(void)
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+  
+  acquire(&p->lock);
+
+  p->xstate = 0;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+void
+atomic_sleep(uint64 addr)
+{
+  struct proc *p = myproc();
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  atomic_copyout(p->pagetable,addr);
+
+  // Go to sleep.
+  p->state = SLEEPING;
+
+  sched();
+
+  // Reacquire original lock.
+  release(&p->lock);
+  //acquire(lk);
+}
+
+void
+cond_wakeup(int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == pid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..cf2b239 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //offline-4
+  struct spinlock memlock;
+  int isThread;
+  int memId;  
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ba746db 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+//Offline-4
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_atomic_sleep(void);
+extern uint64 sys_cond_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_atomic_sleep]   sys_atomic_sleep,
+[SYS_cond_wakeup]   sys_cond_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..f708bfe 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+//offline-4
+#define SYS_thread_create  22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
+#define SYS_atomic_sleep  25
+#define SYS_cond_wakeup  26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..d48300b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,47 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// Offline-4
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn,arg,st;
+  argaddr(0,&fcn);
+  argaddr(1,&arg);
+  argaddr(2,&st);
+  return thread_create(fcn,arg,st);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0,&thread_id);
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+
+uint64
+sys_cond_wakeup(void)
+{
+  int pid;
+  argint(0, &pid);
+  cond_wakeup(pid);
+  return 0;
+}
+
+uint64
+sys_atomic_sleep(void)
+{
+  uint64 lk;
+  argaddr(0, &lk);
+  atomic_sleep(lk);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..395c8a2 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,15 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+//offline-4
+void
+uvmThrfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +341,67 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+//offline-4
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    /*if((mem = kalloc()) == 0)
+      goto err;
+    memmove(mem, (char*)pa, PGSIZE);*/
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+uvRangemmirror(pagetable_t old, pagetable_t new, uint64 sz, uint64 nsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = PGROUNDUP(sz); i < nsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    /*if((mem = kalloc()) == 0)
+      goto err;
+    memmove(mem, (char*)pa, PGSIZE);*/
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -370,6 +440,21 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   return 0;
 }
 
+int
+atomic_copyout(pagetable_t pagetable, uint64 dstva)
+{
+  uint64  va0, pa0;
+
+  va0 = PGROUNDDOWN(dstva);
+  pa0 = walkaddr(pagetable, va0);
+  if(pa0 == 0)
+    return -1;
+
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
+  return 0;
+}
+
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..5626452
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,142 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/threadlock.c"
+#define QUEUE_SIZE 5
+struct queue {
+    int arr[QUEUE_SIZE];
+    int front;
+    int rear;
+    int size;
+};
+void q_init(struct queue *q) {
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+int q_empty(struct queue *q) {
+    return q->size == 0;
+}
+
+int q_full(struct queue *q) {
+    return q->size == QUEUE_SIZE;
+}
+
+void q_push(struct queue *q, int x) {
+    if (q_full(q)) {
+        printf("Queue is full\n");
+        return;
+    }
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % QUEUE_SIZE;
+    q->size++;
+}
+
+int q_pop(struct queue *q) {
+    if (q_empty(q)) {
+        printf("Queue is empty\n");
+        return -1;  
+    }
+    int item = q->arr[q->front];
+    q->front = (q->front + 1) % QUEUE_SIZE;
+    q->size--;
+    return item;
+}
+struct queue q;
+// a mutex object lock 
+struct thread_mutex mutex;
+struct thread_spinlock splk;
+// a semaphore object empty
+struct sem_t empty_sem;
+// a semaphore object full
+struct sem_t full_sem;
+
+void init()
+{
+	// initialize queue
+	q_init(&q);
+	// initialize mutex lock
+	thread_mutex_init(&mutex);
+	thread_spin_init(&splk);
+	// initialize semaphore empty with 5
+	sem_init(&empty_sem,0,QUEUE_SIZE);
+	// initialize semaphore full with 0
+	sem_init(&full_sem,0,0);
+}
+
+void ProducerFunc(void * arg)
+{	
+	thread_spin_lock(&splk);
+	printf("%s\n",(char*)arg);
+	thread_spin_unlock(&splk);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+		sem_wait(&empty_sem);
+		// wait for mutex lock
+		//thread_mutex_lock(&mutex);
+		thread_spin_lock(&splk);
+		sleep(1);	
+		q_push(&q,i);
+		printf("producer produced item %d\n",i);
+		// unlock mutex lock
+		thread_spin_unlock(&splk);
+		//thread_mutex_unlock(&mutex);	
+		// post semaphore full
+		sem_post(&full_sem);
+	}
+	thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	thread_spin_lock(&splk);
+	printf("%s\n",(char*)arg);
+	thread_spin_unlock(&splk);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+		sem_wait(&full_sem);
+		// wait for mutex lock
+ 		//thread_mutex_lock(&mutex);
+		thread_spin_lock(&splk);
+		sleep(1);
+		int item = q_pop(&q);
+		printf("consumer consumed item %d\n",item);	
+		// unlock mutex lock
+		thread_spin_unlock(&splk);
+		//thread_mutex_unlock(&mutex);
+		// post semaphore empty	
+		sem_post(&empty_sem);
+	}
+	thread_exit();
+}
+
+int main(void)
+{	
+	
+	init();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2, r1, r2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	r1 = thread_join(thread1);
+  	r2 = thread_join(thread2);	
+	printf("Threads finished: (%d):%d, (%d):%d\n", 
+      thread1, r1, thread2, r2);
+	
+	exit(0);
+}
diff --git a/user/threadlock.c b/user/threadlock.c
new file mode 100644
index 0000000..661c97a
--- /dev/null
+++ b/user/threadlock.c
@@ -0,0 +1,216 @@
+#include "kernel/memlayout.h"
+#include "threadlock.h"
+#include "kernel/riscv.h"
+
+
+// Check whether this proc is holding the lock.
+// Interrupts must be off.
+int
+holding(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+
+void thread_spin_init(struct thread_spinlock *lk)
+{
+    lk->locked = 0;
+    lk->pid = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+    if(holding(lk))
+    printf("panic-acquire");
+    //panic("acquire");
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+    if(!holding(lk))
+    printf("panic-release");
+    //panic("release");
+
+    lk->pid = 0;
+
+    // Tell the C compiler and the CPU to not move loads or stores
+    // past this point, to ensure that all the stores in the critical
+    // section are visible to other CPUs before the lock is released,
+    // and that loads in the critical section occur strictly before
+    // the lock is released.
+    // On RISC-V, this emits a fence instruction.
+    __sync_synchronize();
+
+    // Release the lock, equivalent to lk->locked = 0.
+    // This code doesn't use a C assignment, since the C standard
+    // implies that an assignment might be implemented with
+    // multiple store instructions.
+    // On RISC-V, sync_lock_release turns into an atomic swap:
+    //   s1 = &lk->locked
+    //   amoswap.w zero, zero, (s1)
+    __sync_lock_release(&lk->locked);
+}
+
+void thread_mutex_init(struct thread_mutex *m)
+{
+    m->locked = 0;
+    m->pid = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0)
+    sleep(1);
+    // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  m->pid = getpid();
+}
+
+void
+thread_mutex_unlock(struct thread_mutex *m)
+{
+
+  m->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+}
+
+void queue_init(struct queue_t *q) {
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+int queue_empty(struct queue_t *q) {
+    return q->size == 0;
+}
+
+int queue_full(struct queue_t *q) {
+    return q->size == MAX_QUEUE_SIZE;
+}
+
+void queue_push(struct queue_t *q, int x) {
+    if (queue_full(q)) {
+        //printf("Queue is full\n");
+        return;
+    }
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
+    q->size++;
+}
+
+int queue_pop(struct queue_t *q) {
+    if (queue_empty(q)) {
+        //printf("Queue is empty\n");
+        return -1;  
+    }
+    int item = q->arr[q->front];
+    q->front = (q->front + 1) % MAX_QUEUE_SIZE;
+    q->size--;
+    return item;
+}
+
+void thread_cond_init(struct thread_cond *cv) {
+    queue_init(&(cv->wait_queue));
+    thread_mutex_init(&(cv->mutex));
+}
+
+void thread_cond_wait(struct thread_cond *cv, struct thread_mutex *mutex) {
+
+    thread_mutex_lock(&cv->mutex);
+    queue_push(&cv->wait_queue, getpid());
+    thread_mutex_unlock(&cv->mutex);
+    
+    atomic_sleep(&mutex->locked); //system call to get atomic sleep
+    // Re-acquire the mutex
+    thread_mutex_lock(mutex);
+}
+
+void thread_cond_signal(struct thread_cond *cv) {
+    int tid;
+    
+    thread_mutex_lock(&cv->mutex);
+    tid = queue_pop(&cv->wait_queue);
+    if (tid>0){
+        cv->mutex.pid = 0;
+        cond_wakeup(tid); //system call to wake up
+    }
+    thread_mutex_unlock(&cv->mutex);
+}
+
+void thread_cond_broadcast(struct thread_cond *cv) {
+    int tid;
+    
+    thread_mutex_lock(&cv->mutex);
+    cv->mutex.pid = 0;
+    while (!queue_empty(&cv->wait_queue))
+    {
+      tid = queue_pop(&cv->wait_queue);
+      if (tid>0)
+        cond_wakeup(tid); //system call to wake up
+    }
+    thread_mutex_unlock(&cv->mutex);
+}
+
+int sem_init(struct sem_t *s, int pshared, int value) {
+    if (pshared) {  return -1; }
+
+    s->count = value;
+    thread_mutex_init(&s->m);
+    thread_cond_init(&s->cv);
+    return 0;
+}
+
+void sem_post(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    s->count++;
+    thread_cond_signal(&s->cv); /* Wake up one waiting thread! */
+    thread_mutex_unlock(&s->m);
+}
+
+void sem_wait(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    while (s->count <= 0) {
+        thread_cond_wait(&s->cv, &s->m); /*unlock mutex, wait, relock mutex */
+    }
+    s->count--;
+    thread_mutex_unlock(&s->m);
+}
+
diff --git a/user/threadlock.h b/user/threadlock.h
new file mode 100644
index 0000000..b2cece3
--- /dev/null
+++ b/user/threadlock.h
@@ -0,0 +1,33 @@
+#define MAX_QUEUE_SIZE 16
+
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  int pid;   // The proc holding the lock.
+};
+
+struct thread_mutex {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  int pid;   // The proc holding the lock.
+};
+
+struct queue_t {
+    int arr[MAX_QUEUE_SIZE];
+    int front;
+    int rear;
+    int size;
+};
+
+struct thread_cond {
+  struct queue_t wait_queue;
+  struct thread_mutex mutex;
+};
+
+struct sem_t {
+    int count; 
+    struct thread_mutex m;
+    struct thread_cond cv;
+};
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..54ab4c3
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,75 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/threadlock.c"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+
+    thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         //thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+         //thread_spin_unlock(&lock);
+    }
+    thread_spin_lock(&lock);
+    printf( "Done s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+  thread_mutex_init(&mlock);
+  thread_spin_init(&lock);
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..b9edf84 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,7 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+//offline-4
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int atomic_sleep(uint8* lv);
+void cond_wakeup(int pid);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..224fbe0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("atomic_sleep");
+entry("cond_wakeup");
+
